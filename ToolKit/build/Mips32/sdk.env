#
# Copyright c 1999 - 2005
# Intel Corporation.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# 3. All advertising materials mentioning features or use of this software must
#    display the following acknowledgement:
# 
#    This product includes software developed by Intel Corporation and its
#    contributors.
# 
# 4. Neither the name of Intel Corporation or its contributors may be used to
#    endorse or promote products derived from this software without specific
#    prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY INTEL CORPORATION AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED.  IN NO EVENT SHALL INTEL CORPORATION OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# INCLUDING NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

#	
# The following environment variables must be defined for a "make" to work.
#

#
# Directories
#

SDK_BUILD_DIR = $(SDK_INSTALL_DIR)/build/$(SDK_BUILD_ENV)/output
SDK_BIN_DIR   = $(SDK_INSTALL_DIR)/build/$(SDK_BUILD_ENV)/bin
BUILD_TOOL    = $(SDK_INSTALL_DIR)/build/tools/bin
BIN_DIR       = $(SDK_BIN_DIR)

#
# Processor type
#

PROCESSOR=Mips32

#
# Flags
#
# NOTE: CHANGE C_BUILD, AFLAGS, & CC WHEN YOU CHANGE COMPILERS 
#
C_STD_INCLUDE       = -nostdinc -nostdlib -fno-builtin
ASM_STD_INCLUDE     = $(C_STD_INCLUDE)

C_STD_FLAGS         = -Wall -fshort-wchar
ASM_STD_FLAGS       = -P -xassembler-with-cpp -D__ASSEMBLER__  $(C_STD_FLAGS)
LINK_STD_FLAGS      =
LIB_STD_FLAGS       =


C_PIC_FLAGS       = -G0 -mno-abicalls -fno-pic
ASM_PIC_FLAGS     = $(C_PIC_FLAGS)
#
# Build type specific flags.  Globally relevant flags belong in the standard 
# macros, xxx_STD_FLAGS defined above.  Platform specific macros belong in the
# PlatformTools.env file in macros named xxx_PROJ_FLAGS.
#
C_ARCH_FLAGS          = -mabi=32 -mips3 -EL -Wa,-mno-pdr -DEFI32 \
                        $(C_PIC_FLAGS)
ASM_ARCH_FLAGS        = $(C_ARCH_FLAGS) $(ASM_PIC_FLAGS)
LINK_ARCH_FLAGS       = -EL
LIB_ARCH_FLAGS        =

C_PROJ_FLAGS  =

ifeq ($(EFI_DEBUG),YES)
C_PROJ_FLAGS += -DEFI_DEBUG 
endif


#
# set EFI include directory
# "include/efi110" for EFI1.10 and Multimodal application
# "include/efi"	for EFI1.02 application
#

ifeq ($(EFI_APPLICATION_COMPATIBILITY),EFI_APP_110)
EFI_INC_DIR   = efi110
C_PROJ_FLAGS += -DEFI_APP_110
else ifeq ($(EFI_APPLICATION_COMPATIBILITY),EFI_APP_MULTIMODAL)
EFI_INC_DIR   = efi110
C_PROJ_FLAGS += -DEFI_APP_MULTIMODAL 
else ifeq ($(EFI_APPLICATION_COMPATIBILITY),EFI_APP_102)
EFI_INC_DIR   = efi
C_PROJ_FLAGS += -DEFI_APP_102
else
$(info  "EFI_APPLICATION_COMPATIBILITY" not set correctly, set it it to dafault "EFI_APP_102")
EFI_INC_DIR   = efi
C_PROJ_FLAGS += -DEFI_APP_102
endif


#
# SOFT_SDV flag is referenced in pci22.h
#

ifeq ($(SOFT_SDV),YES)
C_PROJ_FLAGS += -DSOFT_SDV
endif

#
#  Set this to 1 when compiling applications that will be run on firmware
#  with pre-0.99 EFI shells
#
#OLD_SHELL = 1

#
# gcc
#
CC   = gcc
LINK = ld
LIB  = ar
ASM  = gcc

MAKE    = make
FWIMAGE = $(BUILD_TOOL)/fwimage
#BSCMAKE = bscmake

#
# Flags
#
#L_FLAGS   = $(LINK_ARCH_FLAGS) $(L_BUILD_FLAGS) $(L_PROJ_FLAGS)
#C_FLAGS   = $(C_ARCH_FLAGS) $(C_BUILD_FLAGS) $(C_STD_INCLUDE) $(C_PROJ_FLAGS) $(INC)
#LIB_FLAGS = $(LIB_BUILD_FLAGS) $(LIB_PROJ_FLAGS)

C_FLAGS           = $(C_STD_FLAGS) $(C_ARCH_FLAGS) $(C_PROJ_FLAGS) $(C_STD_INCLUDE) $(INC)
ASM_FLAGS         = $(ASM_STD_FLAGS) $(ASM_ARCH_FLAGS) $(ASM_PROJ_FLAGS) $(ASM_STD_INCLUDE) $(INC) 
LINK_FLAGS_DLL    = $(LINK_STD_FLAGS) $(LINK_ARCH_FLAGS) $(LINK_PROJ_FLAGS) -r -d -N 
LINK_FLAGS_EXE    = $(LINK_STD_FLAGS) $(LINK_ARCH_FLAGS) $(LINK_PROJ_FLAGS) 
LIB_FLAGS         = $(LIB_STD_FLAGS) $(LIB_ARCH_FLAGS) $(LIB_PROJ_FLAGS) 


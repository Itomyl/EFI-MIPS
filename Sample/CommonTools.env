#/*++
#  
#  Copyright (c) 2009, kontais
#  Copyright (c) 2004 - 2007, Intel Corporation                                                         
#  All rights reserved. This program and the accompanying materials                          
#  are licensed and made available under the terms and conditions of the BSD License         
#  which accompanies this distribution.  The full text of the license may be found at        
#  http://opensource.org/licenses/bsd-license.php                                            
#                                                                                            
#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,                     
#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.             
#  
#  Module Name:
#  
#    CommonTools.env 
#  
#  Abstract:
#  
#    This file should not need to be customized. Customizations should
#    be done in LocalTools.env if at all possible.
#
#    This file can be included by other makefiles. 
#   
#    It defines variables used by the different toolchains. It first includes
#    the user-customized LocalTools.env, and then uses those defines to 
#    define other variables.
#
#    It basically has sections for different toolchains which define variables
#    used to build.
#   
#--*/

#
# Everything depends on EDK_SOURCE. Make sure it's defined
#
ifndef EDK_SOURCE
$(error EDK_SOURCE environmental variable not set )
endif

#
# Tools depend on BUILD_DIR. Make sure it's defined
#
ifndef BUILD_DIR
$(error BUILD_DIR environmental variable not set.  Should be set in PlatformTools.env)
endif

#
# This include file gets customized by the developer. Get the customizations.
#
include $(EDK_SOURCE)/Sample/LocalTools.env

################################################################################
#
# Define paths for EFI build tools
#
################################################################################
ifndef EDK_TOOLS_PATH
EDK_TOOLS_BIN     = $(EDK_SOURCE)/Tools/Bin
else
EDK_TOOLS_BIN     = $(EDK_TOOLS_PATH)/Bin
endif
EDK_TOOLS_DIR     = $(EDK_SOURCE)/Sample/Tools
EDK_TOOLS_SOURCE  = $(EDK_TOOLS_DIR)/Source
EDK_TOOLS_COMMON  = $(EDK_TOOLS_DIR)/Source/Common
EDK_TOOLS_OUTPUT  = $(BUILD_DIR)/Tools
PCCTS_DIR         = $(EDK_SOURCE)/Other/Maintained/Tools/Pccts

#
# This include file gets some version info.
#
include $(EDK_SOURCE)/Sample/Version.env

#
# Macros to define the build tools
#
ANTLR           = $(PCCTS_DIR)/bin/antlr
DLG             = $(PCCTS_DIR)/bin/dlg
FWIMAGE         = $(EDK_TOOLS_OUTPUT)/FwImage
GENDEPEX        = $(EDK_TOOLS_OUTPUT)/GenDepex
GENFDIMAGE      = $(EDK_TOOLS_OUTPUT)/GenFdImage
GENFFSFILE      = $(EDK_TOOLS_OUTPUT)/GenFfsFile
GENFVIMAGE      = $(EDK_TOOLS_OUTPUT)/GenFvImage
GENSECTION      = $(EDK_TOOLS_OUTPUT)/GenSection
GUIDCHK         = $(EDK_TOOLS_OUTPUT)/GuidChk
MAKEDEPS        = $(EDK_TOOLS_OUTPUT)/MakeDeps
PROCESSDSC      = $(EDK_TOOLS_OUTPUT)/ProcessDsc
STRGATHER       = $(EDK_TOOLS_OUTPUT)/StrGather
SETSTAMP        = $(EDK_TOOLS_OUTPUT)/SetStamp
VFRCOMPILE      = $(EDK_TOOLS_OUTPUT)/VfrCompile
GENAPRIORI      = $(EDK_TOOLS_OUTPUT)/GenAprioriFile

MAKE            = make

#
# Everything else requires that TOOLCHAIN be defined. This should be defined
# by the calling makefile. 
#
ifeq ($(flavor TOOLCHAIN),undefined)
$(error TOOLCHAIN not defined for $(EDK_SOURCE)/Sample/CommonTools.env)
endif

###############################################################################
#
# Specify the path and macros for ASL tools
#
###############################################################################
ifeq ($(EFI_ASL_LOCAL),YES)
ASL               = $(ASLPATH)/Iasl
else
ASL               = $(EDK_TOOLS_BIN)/Iasl
endif

ASL_FLAGS         =
C_FLAGS_ASL       =

###############################################################################
#
# Specify the path and macros for MIPS32 tools
#
###############################################################################

ifeq ($(TOOLCHAIN),TOOLCHAIN_Mips32)

#
# Globally relevant flags. Options not appropriate for all builds may be 
# appropriate in the processor architecture specific macros (xxx_ARCH_FLAGS) or
# in the platform specific macros (xxx_PROJ_FLAGS)
#
C_STD_INCLUDE       = -nostdinc -nostdlib -fno-builtin
ASM_STD_INCLUDE     = $(C_STD_INCLUDE)

ifeq ($(EFI_GENERATE_INTERMEDIATE_FILE),YES)
C_STD_FLAGS         = -g -Wall -fshort-wchar -c -o $@ $(INC)
else
C_STD_FLAGS         = -Wall -fshort-wchar -c -o $@ $(INC)
endif
ASM_STD_FLAGS       = -P -xassembler-with-cpp -D__ASSEMBLER__  $(C_STD_FLAGS)
LINK_STD_FLAGS      =
LIB_STD_FLAGS       =


C_PIC_FLAGS       = -G0 -mno-abicalls -fno-pic
ASM_PIC_FLAGS     = $(C_PIC_FLAGS)
#
# Build type specific flags.  Globally relevant flags belong in the standard 
# macros, xxx_STD_FLAGS defined above.  Platform specific macros belong in the
# PlatformTools.env file in macros named xxx_PROJ_FLAGS.
#
C_ARCH_FLAGS          = -mabi=32 -mips3 -EL -Wa,-mno-pdr -DEFI32 \
                        $(C_PIC_FLAGS)
ASM_ARCH_FLAGS        = $(C_ARCH_FLAGS) $(ASM_PIC_FLAGS)
LINK_ARCH_FLAGS       = -EL
LIB_ARCH_FLAGS        =

#
# Build tools
#
CC                = gcc
CXX               = g++
LINK              = ld
LIB               = ar
ASM               = gcc
OBJCOPY           = objcopy


ifeq ($(EFI_SYMBOLIC_DEBUG),YES)
ASM_ARCH_FLAGS      +=
C_STD_FLAGS         +=
LINK_STD_FLAGS      +=
endif

# END OF TOOLCHAIN_MIPS32
###############################################################################

###############################################################################
#
# Specify the path and macros for the X64 (also called x86-64, EM64T, AMD64) tools
#
###############################################################################

else ifeq ($(TOOLCHAIN),TOOLCHAIN_X64)

#
# Globally relevant flags. Options not appropriate for all builds may be 
# appropriate in the processor architecture specific macros (xxx_ARCH_FLAGS) or
# in the platform specific macros (xxx_PROJ_FLAGS)
#
C_STD_INCLUDE       = /X
ifeq ($(EFI_GENERATE_INTERMEDIATE_FILE),YES)
C_STD_FLAGS         = /nologo /W4 /WX /Gy /c /GS- /Fa$* /FAsc /Fo$@ /FR$(@R).SBR $(INC) 
else
C_STD_FLAGS         = /nologo /W4 /WX /Gy /c /GS- /Fo$@ $(INC) 
endif
ASM_STD_FLAGS       = /nologo $(INC)
LINK_STD_FLAGS      = /nologo /SUBSYSTEM:CONSOLE /NODEFAULTLIB /MAP /OPT:REF /BASE:0 /IGNORE:4001,4078,4086,4096,4108 $(BUILD_DIR)/X64/CompilerStub.lib
LIB_STD_FLAGS       = /nologo 

#
# Build type specific flags.  Globally relevant flags belong in the standard 
# macros, xxx_STD_FLAGS defined above.  Platform specific macros belong in the
# PlatformTools.env file in macros named xxx_PROJ_FLAGS.
#
C_ARCH_FLAGS          = /D EFIX64
ASM_ARCH_FLAGS        = /W3 /WX /c /Fo$@ /DEFIX64
LINK_ARCH_FLAGS       = /Machine:AMD64
LIB_ARCH_FLAGS        =

ASM16_FLAGS           = /nologo /c /omf /Fo$@
ASMLINK16_FLAGS       =

#
# Build tools
#
ifeq ($(EFI_COMPILER_X64_NAME),)
CC                = $(WIN_DDK_X64_PATH)/cl
LINK              = $(WIN_DDK_X64_PATH)/link
LIB               = $(WIN_DDK_X64_PATH)/lib
ASM               = $(WIN_DDK_X64_PATH)/ml64
else
CC                = $(EDK_TOOLS_BIN)/X64/$(EFI_COMPILER_X64_NAME)/cl
LINK              = $(EDK_TOOLS_BIN)/X64/$(EFI_COMPILER_X64_NAME)/link
LIB               = $(EDK_TOOLS_BIN)/X64/$(EFI_COMPILER_X64_NAME)/lib
ASM               = $(EDK_TOOLS_BIN)/X64/$(EFI_COMPILER_X64_NAME)/ml64
endif

ifeq ($(EFI_ASSEMBLER_NAME),)
ASM16             = $(MASMPATH)/bin/ml
ASMLINK16         = $(MASMPATH)/binr/link
ASMLINK           = $(MASMPATH)/binr/link
else
ASM16             = $(EDK_TOOLS_BIN)/Ia32/$(EFI_ASSEMBLER_NAME)/bin/ml
ASMLINK16         = $(EDK_TOOLS_BIN)/Ia32/$(EFI_ASSEMBLER_NAME)/binr/link
ASMLINK           = $(EDK_TOOLS_BIN)/Ia32/$(EFI_ASSEMBLER_NAME)/binr/link
endif

BSCMAKE           = bscmake

ifeq ($(EFI_SYMBOLIC_DEBUG),YES)
ASM_ARCH_FLAGS      = $(ASM_ARCH_FLAGS) /Zi /DDEBUG
C_STD_FLAGS         = $(C_STD_FLAGS) /Zi /Gm /Fd$(DEST_DIR)/$(BASE_NAME)Obj
LINK_STD_FLAGS      = $(LINK_STD_FLAGS) /DEBUG
endif

# END OF TOOLCHAIN_X64
###############################################################################

###############################################################################
#
# Specify the path and macros for the IPF tools
#
###############################################################################

else ifeq ($(TOOLCHAIN),TOOLCHAIN_IPF)

#
# Globally relevant flags. Options not appropriate for all builds may be 
# appropriate in the processor architecture specific macros (xxx_ARCH_FLAGS) or
# in the platform specific macros (xxx_PROJ_FLAGS)
#
C_STD_INCLUDE       = /X
ifeq ($(EFI_GENERATE_INTERMEDIATE_FILE),YES)
ifeq ($(USE_NEWDDK),YES)
C_STD_FLAGS         = /nologo /W4 /WX /EHsc /Gy /GS- /c /Fa$* /FAsc /Fo$@ /FR$(@R).SBR $(INC)
else
C_STD_FLAGS         = /nologo /W4 /WX /GX /Gy /c /Fa$* /FAsc /Fo$@ /FR$(@R).SBR $(INC)
endif
else
ifeq ($(USE_NEWDDK),YES)
C_STD_FLAGS         = /nologo /W4 /WX /EHsc /Gy /GS- /c /Fo$@ $(INC)
else
C_STD_FLAGS         = /nologo /W4 /WX /GX /Gy /c /Fo$@ $(INC)
endif
endif
ASM_STD_FLAGS       = $(INC) 
LINK_STD_FLAGS      = /nologo /SUBSYSTEM:CONSOLE /NODEFAULTLIB /MAP /OPT:REF /BASE:0 /IGNORE:4001,4078,4086,4096,4108
LIB_STD_FLAGS       = /nologo 

#
# Build type specific flags.  Globally relevant flags belong in the standard 
# macros, xxx_STD_FLAGS defined above.  Platform specific macros belong in the
# PlatformTools.env file in macros named xxx_PROJ_FLAGS.
#
C_ARCH_FLAGS          = /D EFI64
ASM_ARCH_FLAGS        = -N us -X explicit -M ilp64 -N so -W4 -o $@
LINK_ARCH_FLAGS       = /MACHINE:IA64
LIB_ARCH_FLAGS        =

#
# This is used for preprocessing IPF Assembly files
#
C_FLAGS_PRO       = /nologo /EP /C $(C_STD_FLAGS) $(C_ARCH_FLAGS) $(C_PROJ_FLAGS) $(C_STD_INCLUDE)

ifeq ($(EFI_DEBUG),YES)
ASM_ARCH_FLAGS   = $(ASM_ARCH_FLAGS) -d debug
endif

#
# Build tools
#
ifeq ($(EFI_COMPILER_NAME),)
CC                = $(EFI_IA64TOOLPATH)/cl
LINK              = $(EFI_IA64TOOLPATH)/link
LIB               = $(EFI_IA64TOOLPATH)/lib
else
CC                = $(EDK_TOOLS_BIN)/Ipf/$(EFI_COMPILER_NAME)/cl
LINK              = $(EDK_TOOLS_BIN)/Ipf/$(EFI_COMPILER_NAME)/link
LIB               = $(EDK_TOOLS_BIN)/Ipf/$(EFI_COMPILER_NAME)/lib
endif

ifeq ($(EFI_ASSEMBLER_NAME),)
ASM               = $(EFI_IA64ASMPATH)/ias
ASMLINK           = $(EFI_IA64ASMPATH)/link
else
ASM               = $(EDK_TOOLS_BIN)/Ipf/$(EFI_ASSEMBLER_NAME)/ias
ASMLINK           = $(EDK_TOOLS_BIN)/Ipf/$(EFI_ASSEMBLER_NAME)/link
endif

BSCMAKE           = bscmake

ifeq ($(EFI_SYMBOLIC_DEBUG),YES)
C_STD_FLAGS         = $(C_STD_FLAGS) /Zi /Gm /Fd$(DEST_DIR)/$(BASE_NAME)Obj
LINK_STD_FLAGS      = $(LINK_STD_FLAGS) /DEBUG
endif

# END TOOLCHAIN_IPF
###############################################################################

###############################################################################
#
# Define toolchain for building the EFI tools on an MIPS32 Liux system.
#
###############################################################################

else ifeq ($(TOOLCHAIN),TOOLCHAIN_GCC)

#
# Globally relevant flags. Options not appropriate for all builds may be 
# appropriate in the processor architecture specific macros (xxx_ARCH_FLAGS) or
# in the platform specific macros (xxx_PROJ_FLAGS)
#
C_STD_INCLUDE =
ASM_STD_INCLUDE = $(C_STD_INCLUDE)

ifeq ($(EFI_GENERATE_INTERMEDIATE_FILE),YES)
C_STD_FLAGS         = -g -Wall -fshort-wchar -c -o $@ $(INC)
else
C_STD_FLAGS         = -g -Wall -fshort-wchar -c -o $@ $(INC)
endif
ASM_STD_FLAGS       = -P -xassembler-with-cpp $(C_STD_FLAGS)
LINK_STD_FLAGS      = --eh-frame-hdr
LIB_STD_FLAGS       =


#
# Build type specific flags.  Globally relevant flags belong in the standard 
# macros, xxx_STD_FLAGS defined above.  Platform specific macros belong in the
# PlatformTools.env file in macros named xxx_PROJ_FLAGS.
#
C_ARCH_FLAGS          += -D LINUX32 -D NDEBUG -D _CONSOLE
ASM_ARCH_FLAGS        +=
LINK_ARCH_FLAGS       += -EL -melf32ltsmip
LIB_ARCH_FLAGS        +=

#
# Always turn on debug for the build tools so that we can debug problems 
# quickly.
# NOTE: Ideally all the tools makefiles should be updated to use LINK_FLAGS_EXE
#       instead of L_FLAGS for linking. When this happens we can get rid of
#       the L_FLAGS definition here.
#

#if "$(EFI_SYMBOLIC_DEBUG)" == "YES"
C_STD_FLAGS       +=
LINK_ARCH_FLAGS   +=
L_FLAGS           +=
#endif

#
# Clear any project flags when building tools
#
C_PROJ_FLAGS          +=
ASM_PROJ_FLAGS        +=
LINK_PROJ_FLAGS       +=
LIB_PROJ_FLAGS        +=
EBC_C_PROJ_FLAGS      +=
EBC_LINK_PROJ_FLAGS   +=
EBC_LIB_PROJ_FLAGS    +=

#
# Build tools
#
CC                = gcc
CXX               = g++
LINK              = ld
ASM               = gcc
ASMLINK           = ld
#
# Use a different macro name for tools build to avoid conflict with environment
# variable LIB
#
LIB               = ar

INC = -I $(EDK_SOURCE)/Foundation                          \
      -I $(EDK_SOURCE)/Foundation/Efi                      \
      -I $(EDK_SOURCE)/Foundation/Framework                \
      -I $(EDK_SOURCE)/Sample/Platform/Linux32             \
      -I $(EDK_SOURCE)/Foundation/Core/Dxe                 \
      -I $(EDK_SOURCE)/Foundation/Include                  \
      -I $(EDK_SOURCE)/Foundation/Efi/Include              \
      -I $(EDK_SOURCE)/Foundation/Framework/Include        \
      -I $(EDK_SOURCE)/Foundation/Include/IndustryStandard \
      -I $(EDK_SOURCE)/Foundation/Include/Mips32           \
      -I $(EDK_SOURCE)/Foundation/Include/Pei              \
      -I $(EDK_SOURCE)/Foundation/Library/Pei/Include      \
      -I $(EDK_SOURCE)/Foundation/Library/ElfLoader        \
      -I $(EDK_SOURCE)/Sample/Include                      \
      -I "$(EDK_TOOLS_COMMON)"

# END TOOLCHAIN_GCC
###############################################################################

###############################################################################
#
# Specify the path and macros for the EBC tools
#
###############################################################################

else ifeq ($(TOOLCHAIN),TOOLCHAIN_EBC)

ifeq ($(EFI_GENERATE_INTERMEDIATE_FILE),YES)
EBC_C_STD_FLAGS     = /nologo /W3 /WX /c /Fa$* /FAsc /Fo$@ $(INC) /X
else
EBC_C_STD_FLAGS     = /nologo /W3 /WX /c /Fo$@ $(INC) /X
endif

#
# All EBC entry point functions must be called EfiMain. Redefine it.
#
ifeq ($(IMAGE_ENTRY_POINT),)
IMAGE_ENTRY_POINT   = EfiMain
endif
EBC_C_STD_FLAGS     = $(EBC_C_STD_FLAGS) /D $(IMAGE_ENTRY_POINT)=EfiMain
EBC_LINK_STD_FLAGS  = /nologo /MACHINE:EBC /BASE:0 /OPT:REF /NODEFAULTLIB
EBC_LIB_STD_FLAGS   = /nologo /MACHINE:EBC 

#
# EBC tools path should be defined in LocalTools.env.
#
EBC_CC            = $(EBC_TOOLS_PATH)/Bin/Iec
EBC_LINK          = $(EBC_TOOLS_PATH)/Bin/Link
EBC_LIB           = $(EBC_TOOLS_PATH)/Bin/Link /lib

ifeq ($(EFI_SYMBOLIC_DEBUG),YES)
EBC_C_STD_FLAGS     = $(EBC_C_STD_FLAGS) /Zd /Zi
EBC_LINK_STD_FLAGS  = $(EBC_LINK_STD_FLAGS) /DEBUG
endif

#  END TOOLCHAIN_EBC

###############################################################################
#
# Let the caller define a NULL toolchain if they don't care. This way you can
# pick up at least some defines.
#
###############################################################################

else ifeq ($(TOOLCHAIN),)

###############################################################################
#
# You get this if the calling makefile did not define TOOLCHAIN_xxx before
# including this file.
#
###############################################################################

else
$(error Unknown toolchain $(TOOLCHAIN) defined for $(EDK_SOURCE)/Sample/CommonTools.env use)
endif


###############################################################################
#
# These are standard settings for all tool chains
#
###############################################################################

#
# These are standard build options
#
VERSION_FLAGS       = -DEFI_SPECIFICATION_VERSION=$(EFI_SPECIFICATION_VERSION) \
                      -DTIANO_RELEASE_VERSION=$(TIANO_RELEASE_VERSION)
C_STD_FLAGS         += $(VERSION_FLAGS)
EBC_C_STD_FLAGS     += $(VERSION_FLAGS)
VFRCOMPILE_FLAGS    += -ppflag "$(VERSION_FLAGS)"

ifeq ($(EFI_DEBUG),YES)
C_STD_FLAGS         += -DEFI_DEBUG
EBC_C_STD_FLAGS     += -DEFI_DEBUG
VFRCOMPILE_FLAGS    += -ppflag "-D EFI_DEBUG"
endif

ifeq ($(EFI_DEBUG_CLEAR_MEMORY),YES)
C_STD_FLAGS     += -DEFI_DEBUG_CLEAR_MEMORY
endif

ifeq ($(EFI_PEI_PERFORMANCE),YES)
C_STD_FLAGS     += -DEFI_PEI_PERFORMANCE -DEFI_DXE_PERFORMANCE
endif

ifeq ($(EFI_ADDTIONAL_DRIVERS),YES)
C_STD_FLAGS     += -DEFI_ADDTIONAL_DRIVERS
endif

ifeq ($(EFI_USE_CUSTOM_COMPRESS),YES)
C_STD_FLAGS     += -DEFI_USE_CUSTOM_COMPRESS
endif

ifeq ($(EFI_UNLOCK_FWH),YES)
C_STD_FLAGS     += -DEFI_UNLOCK_FWH
endif

ifeq ($(EFI_DXE_PERFORMANCE),YES)
C_STD_FLAGS     += -DEFI_DXE_PERFORMANCE
endif

ifeq ($(EFI_DEBUG_SERIAL_PRINT),YES)
C_STD_FLAGS     += -DEFI_DEBUG_SERIAL_PRINT
endif

ifeq ($(EFI_S3_RESUME),YES)
C_STD_FLAGS     += $(C_STD_FLAGS) -DEFI_S3_RESUME
endif

ifeq ($(EFI_PEI_REPORT_STATUS_CODE),YES)
C_STD_FLAGS     += -DEFI_PEI_REPORT_STATUS_CODE_ON
endif

###############################################################################

###############################################################################
#
# Collect final build flags for components.  These flags are used to build
# any standard component and some non-standard components.
#
###############################################################################
C_FLAGS           = $(C_STD_FLAGS) $(C_ARCH_FLAGS) $(C_PROJ_FLAGS) $(C_STD_INCLUDE)
ASM_FLAGS         = $(ASM_STD_FLAGS) $(ASM_ARCH_FLAGS) $(ASM_PROJ_FLAGS) $(ASM_STD_INCLUDE)
LINK_FLAGS_DLL    = $(LINK_STD_FLAGS) $(LINK_ARCH_FLAGS) $(LINK_PROJ_FLAGS) -r -d -N
LINK_FLAGS_EXE    = $(LINK_STD_FLAGS) $(LINK_ARCH_FLAGS) $(LINK_PROJ_FLAGS) 
LIB_FLAGS         = $(LIB_STD_FLAGS) $(LIB_ARCH_FLAGS) $(LIB_PROJ_FLAGS)
EBC_C_FLAGS       = $(EBC_C_STD_FLAGS) $(EBC_C_ARCH_FLAGS) $(EBC_C_PROJ_FLAGS)
EBC_LINK_FLAGS    = $(EBC_LINK_STD_FLAGS) $(EBC_LINK_ARCH_FLAGS) $(EBC_LINK_PROJ_FLAGS)
EBC_LIB_FLAGS     = $(EBC_LIB_STD_FLAGS) $(EBC_LIB_ARCH_FLAGS) $(EBC_LIB_PROJ_FLAGS)

###############################################################################
#
# define MIPS64 denpendant driver files
#
###############################################################################
ifeq ($(EFI_BUILD_TARGET_MIPS64),YES)
BUILD_TARGET_PROCESSOR = Mips64
DXE_IPL                = DxeIpl64
else
BUILD_TARGET_PROCESSOR = Mips32
DXE_IPL                = DxeIpl
endif                                                                                
###############################################################################
#
# define EFI specification denpendant driver files
#
###############################################################################
ifeq ($(UEFI_MODE),YES)
UEFI_PREFIX = Uefi
ATAPI_PASS_THRU_INF = Sample/Bus/Pci/AtapiExtPassThru/Dxe/AtapiExtPassThru.inf
ifeq ($(CAPSULE_INF),)
CAPSULE_INF = Sample/Universal/Capsule/RuntimeDxe/Capsule.inf 
endif
DEVPATH_INF = Sample/Universal/DevicePath/Dxe/DevicePath.inf
else
UEFI_PREFIX =
CAPSULE_INF =
DEVPATH_INF =
ATAPI_PASS_THRU_INF = Sample/Bus/Pci/AtapiPassThru/Dxe/AtapiPassThru.inf
endif
###############################################################################
#
# define customized compress makefile
#
###############################################################################
CUSTOMIZEDCOMPRESS_MAKEFILE   = $(EDK_TOOLS_SOURCE)/CustomizedCompress
COMPRESS_METHOD               = Dummy                                                 
###############################################################################         
#                                                                                       
# define EFI_BINARY default path
#                                                                                       
###############################################################################  
ifndef EFI_BINARY
EFI_BINARY=$(EDK_TOOLS_OUTPUT)/Bin
endif

EFI_PLATFORM_BIN=$(EFI_BINARY)/$(PROJECT_NAME)$(BUILD_TARGET_DIRECTORY)
